fastapi
uvicorn
sqlalchemy
pyodbc




FastAPI Assignment: JWT-Protected CRUD Operations for a Book Model
Objective
Enhance your existing FastAPI application by adding JWT-based authentication to secure book-related operations. Users should be able to register, log in, and access protected endpoints using JWT tokens.
Requirements
1. User Authentication (JWT Implementation)
Implement JWT-based authentication using the pyjwt library.
Use passlib for password hashing.
Store user credentials in memory (for simplicity) or use a database like SQLite/PostgreSQL.
2. Authentication Endpoints
Create the following authentication-related endpoints:
User Registration (POST /register/)
Accepts username and password.
Hashes the password and stores user details.
User Login (POST /login/)
Accepts username and password.
Verifies the password and returns a JWT token if credentials are valid.
3. Book CRUD Operations (Protected with JWT Authentication)
Secure the following endpoints so only authenticated users with a valid JWT token can access them:
Create a new book (POST /books/)
Accepts title, author, published_year.
Retrieve all books (GET /books/)
Returns a list of all stored books.
Retrieve a book by ID (GET /books/{book_id})
Fetches book details by ID.
Update a book by ID (PUT /books/{book_id})
Modifies book details.
Delete a book by ID (DELETE /books/{book_id})
Removes the book from the database.
üîê All book-related endpoints must require authentication using JWT tokens.

Hints & Resources
Libraries to Use
JWT Handling: pyjwt (jwt library)
Password Hashing: passlib (passlib.context with bcrypt)
FastAPI Security: fastapi.security (OAuth2PasswordBearer)
Dependencies to Install
pip install fastapi uvicorn pydantic pyjwt passlib[bcrypt]
JWT Implementation Steps
Use jwt.encode() to generate access tokens.
Validate tokens using jwt.decode().
Store a secret key (SECRET_KEY = "your_secret_key") to sign tokens.
Protect routes using OAuth2PasswordBearer and FastAPI‚Äôs Depends().
Expected Outcome
A fully functional FastAPI application where:
‚úÖ Users can register and log in to receive a JWT token.
‚úÖ JWT tokens are required to access book-related endpoints.
‚úÖ Only authorized users can perform CRUD operations.
‚úÖ (Bonus) Role-based restrictions apply to book updates and deletions.


